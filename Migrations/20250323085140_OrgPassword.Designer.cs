// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TEZ.DbContext;

#nullable disable

namespace TEZ.Migrations
{
    [DbContext(typeof(TezDbContext))]
    [Migration("20250323085140_OrgPassword")]
    partial class OrgPassword
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TEZ.Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("Organization");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TEZ.Models.UserBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserBases");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TEZ.Models.CorpAdmin", b =>
                {
                    b.HasBaseType("TEZ.Models.Organization");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Company");

                    b.HasDiscriminator().HasValue("CORP_ADMIN");
                });

            modelBuilder.Entity("TEZ.Models.EduAdmin", b =>
                {
                    b.HasBaseType("TEZ.Models.Organization");

                    b.Property<string>("Institute")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Institute");

                    b.HasDiscriminator().HasValue("EDU_ADMIN");
                });

            modelBuilder.Entity("TEZ.Models.Admin", b =>
                {
                    b.HasBaseType("TEZ.Models.UserBase");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("AdminId");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer")
                        .HasColumnName("OrgId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TEZ.Models.Driver", b =>
                {
                    b.HasBaseType("TEZ.Models.UserBase");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("Level");

                    b.Property<long>("OrgId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrgId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TEZ.Models.User", b =>
                {
                    b.HasBaseType("TEZ.Models.UserBase");

                    b.Property<long>("Pass")
                        .HasMaxLength(30)
                        .HasColumnType("bigint")
                        .HasColumnName("Pass");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TEZ.Models.Admin", b =>
                {
                    b.HasOne("TEZ.Models.UserBase", null)
                        .WithOne()
                        .HasForeignKey("TEZ.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TEZ.Models.Driver", b =>
                {
                    b.HasOne("TEZ.Models.UserBase", null)
                        .WithOne()
                        .HasForeignKey("TEZ.Models.Driver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TEZ.Models.User", b =>
                {
                    b.HasOne("TEZ.Models.UserBase", null)
                        .WithOne()
                        .HasForeignKey("TEZ.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
